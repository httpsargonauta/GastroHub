"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import {
  BarChart3,
  ShoppingCart,
  ClipboardList,
  Package,
  Users,
  Settings,
  Bell,
  Search,
  ChevronDown,
  ArrowUpRight,
  ArrowDownRight,
  Calendar,
  Clock,
  DollarSign,
  TrendingUp,
  Menu,
  X,
  Home,
  LogOut,
} from "lucide-react";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { supabase } from "@/utils/supabase/client";
import router from "next/router";

export default function Dashboard() {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [user, setUser] = useState<any>(null);
  const [showErrorDialog, setShowErrorDialog] = useState(false);
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    async function fetchInitialSession() {
      const {
        data: { session },
      } = await supabase.auth.getSession();
      if (session) {
        setUser(session.user);
      }
    }
    fetchInitialSession();
  }, []);

  useEffect(() => {
    async function fetchSession() {
      const {
        data: { session },
        error,
      } = await supabase.auth.getSession();

      if (error || !session?.user) {
        // Si ocurre un error o no hay usuario, mostramos el diálogo de error.
        setShowErrorDialog(true);
      } else {
        setUser(session.user);
      }
      setLoading(false);
    }
    fetchSession();
  }, []);

  if (loading) {
    return <div>Loading...</div>;
  }

  // Si no tenemos la información esencial, se muestra un diálogo para que se vuelva a iniciar sesión.
  if (showErrorDialog || !user?.email) {
    return (
      <Dialog open>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Error de sesión</DialogTitle>
            <DialogDescription>
              No se pudo obtener la información de tu cuenta. Por favor cierra
              la sesión y vuelve a iniciar sesión.
            </DialogDescription>
          </DialogHeader>
          <Button
            onClick={async () => {
              // Se cierra la sesión y se recarga la página para forzar el login.
              await supabase.auth.signOut();
              window.location.href = "/auth";
            }}
          >
            Volver a Iniciar Sesión
          </Button>
        </DialogContent>
      </Dialog>
    );
  }

  return (
    <div className="flex min-h-screen flex-col bg-black text-white">
      {/* Mobile Sidebar Toggle */}
      <button
        className="fixed bottom-4 right-4 z-50 flex h-12 w-12 items-center justify-center rounded-full bg-purple-600 text-white shadow-lg md:hidden"
        onClick={() => setIsSidebarOpen(!isSidebarOpen)}
      >
        {isSidebarOpen ? (
          <X className="h-6 w-6" />
        ) : (
          <Menu className="h-6 w-6" />
        )}
      </button>

      {/* Sidebar */}
      <div
        className={`fixed inset-y-0 left-0 z-50 w-64 transform bg-zinc-900 transition-transform duration-300 ease-in-out md:translate-x-0 ${
          isSidebarOpen ? "translate-x-0" : "-translate-x-full"
        }`}
      >
        <div className="flex h-full flex-col">
          <div className="flex h-16 items-center gap-2 border-b border-white/10 px-6">
            <div className="rounded-md bg-purple-600 p-1">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="h-6 w-6 text-white"
              >
                <path d="M6.13 1L6 16a2 2 0 0 0 2 2h15" />
                <path d="M1 6.13L16 6a2 2 0 0 1 2 2v15" />
              </svg>
            </div>
            <span className="text-xl font-bold">GastroHub</span>
          </div>
          <div className="flex-1 overflow-auto py-4">
            <nav className="grid gap-1 px-2">
              {[
                {
                  icon: <Home className="h-4 w-4" />,
                  label: "Inicio",
                  href: "/dashboard",
                  active: true,
                },
                {
                  icon: <BarChart3 className="h-4 w-4" />,
                  label: "Ventas",
                  href: "#",
                },
                {
                  icon: <ShoppingCart className="h-4 w-4" />,
                  label: "Compras",
                  href: "#",
                },
                {
                  icon: <ClipboardList className="h-4 w-4" />,
                  label: "Recetas",
                  href: "#",
                },
                {
                  icon: <Package className="h-4 w-4" />,
                  label: "Inventario",
                  href: "#",
                },
                {
                  icon: <Users className="h-4 w-4" />,
                  label: "Personal",
                  href: "#",
                },
                {
                  icon: <Settings className="h-4 w-4" />,
                  label: "Configuración",
                  href: "#",
                },
              ].map((item) => (
                <Link
                  key={item.label}
                  href={item.href}
                  className={`flex items-center gap-3 rounded-lg px-3 py-2 text-sm transition-all hover:bg-purple-900/20 ${
                    item.active
                      ? "bg-purple-900/30 text-purple-300"
                      : "text-gray-400 hover:text-white"
                  }`}
                >
                  {item.icon}
                  {item.label}
                </Link>
              ))}
            </nav>
          </div>
          <div className="border-t border-white/10 p-4">
            <div className="flex items-center gap-4">
              <Avatar>
                <AvatarImage
                  src={user.user_metadata?.avatar_url || "/placeholder.svg"}
                  alt="Avatar"
                />
                <AvatarFallback className="bg-purple-900 text-white">
                  {user.user_metadata?.full_name
                    ?.split(" ")
                    .map((name: string) => name[0])
                    .join("")}
                </AvatarFallback>
              </Avatar>
              <div className="flex flex-1 flex-col">
                <span className="text-sm font-medium">
                  {user.user_metadata?.full_name}{" "}
                </span>
                <span className="text-xs text-gray-400">
                  {user.user_metadata?.role}{" "}
                </span>
              </div>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="icon" className="h-8 w-8">
                    <ChevronDown className="h-4 w-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent
                  align="end"
                  className="w-56 bg-zinc-900 text-white"
                >
                  <DropdownMenuLabel>Mi Cuenta</DropdownMenuLabel>
                  <DropdownMenuSeparator className="bg-white/10" />
                  <DropdownMenuItem>
                    <Button
                      variant={"ghost"}
                      onClick={() => {
                        router.push("/dashboard/settings");
                      }}
                    >
                      <Settings className="mr-2 h-4 w-4" />
                      Configuración
                    </Button>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <Button
                      variant={"ghost"}
                      onClick={async () => {
                        await supabase.auth.signOut();
                        window.location.reload();
                      }}
                    >
                      <LogOut className="mr-2 h-4 w-4" />
                      Cerrar Sesión
                    </Button>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex flex-1 flex-col md:pl-64">
        {/* Header */}
        <header className="sticky top-0 z-30 flex h-16 items-center gap-4 border-b border-white/10 bg-black/80 px-6 backdrop-blur">
          <Button variant="ghost" size="icon" className="md:hidden">
            <Menu className="h-5 w-5" />
            <span className="sr-only">Toggle Menu</span>
          </Button>
          <h1 className="text-lg font-semibold md:text-xl">Dashboard</h1>
          <div className="ml-auto flex items-center gap-4">
            <form className="relative hidden md:block">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500" />
              <Input
                type="search"
                placeholder="Buscar..."
                className="w-64 rounded-lg border-white/10 bg-zinc-900 pl-8 text-sm text-white placeholder:text-gray-500 focus:border-purple-600"
              />
            </form>
            <Button variant="ghost" size="icon" className="relative">
              <Bell className="h-5 w-5" />
              <span className="absolute right-1 top-1 h-2 w-2 rounded-full bg-purple-600" />
              <span className="sr-only">Notifications</span>
            </Button>
            <Avatar>
              <AvatarImage
                src="/placeholder.svg?height=32&width=32"
                alt="Avatar"
              />
              <AvatarFallback className="bg-purple-900 text-white">
                JD
              </AvatarFallback>
            </Avatar>
          </div>
        </header>

        {/* Main Content */}
        <main className="flex-1 overflow-auto">
          <div className="container mx-auto p-4 md:p-6 lg:p-8">
            {/* Welcome Section */}
            <div className="mb-8">
              <h2 className="text-2xl font-bold">
                Bienvenido, {user.user_metadata?.full_name}
              </h2>
              <p className="text-gray-400">
                Aquí tienes un resumen de tu negocio
              </p>
            </div>

            {/* Stats Overview */}
            <div className="mb-8 grid gap-4 md:grid-cols-2 lg:grid-cols-4">
              {[
                {
                  title: "Ventas Hoy",
                  value: "$1,429",
                  change: "+14.5%",
                  trend: "up",
                  icon: <DollarSign className="h-4 w-4" />,
                },
                {
                  title: "Clientes",
                  value: "54",
                  change: "+5.2%",
                  trend: "up",
                  icon: <Users className="h-4 w-4" />,
                },
                {
                  title: "Ticket Promedio",
                  value: "$26.45",
                  change: "+2.3%",
                  trend: "up",
                  icon: <TrendingUp className="h-4 w-4" />,
                },
                {
                  title: "Inventario Bajo",
                  value: "7",
                  change: "-3",
                  trend: "down",
                  icon: <Package className="h-4 w-4" />,
                },
              ].map((stat, index) => (
                <Card key={index} className="gradient-border overflow-hidden">
                  <div className="gradient-border-content">
                    <CardHeader className="flex flex-row items-center justify-between pb-2">
                      <CardTitle className="text-sm font-medium text-gray-400">
                        {stat.title}
                      </CardTitle>
                      <div
                        className={`rounded-full p-1 ${
                          stat.trend === "up"
                            ? "bg-green-900/20"
                            : "bg-red-900/20"
                        }`}
                      >
                        {stat.trend === "up" ? (
                          <ArrowUpRight className="h-4 w-4 text-green-400" />
                        ) : (
                          <ArrowDownRight className="h-4 w-4 text-red-400" />
                        )}
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">{stat.value}</div>
                      <p
                        className={`text-xs ${
                          stat.trend === "up"
                            ? "text-green-400"
                            : "text-red-400"
                        }`}
                      >
                        {stat.change} desde ayer
                      </p>
                    </CardContent>
                  </div>
                </Card>
              ))}
            </div>

            {/* Charts Section */}
            <div className="mb-8 grid gap-4 md:grid-cols-2">
              <Card className="border-white/10 bg-zinc-900">
                <CardHeader>
                  <CardTitle>Ventas por Hora</CardTitle>
                  <CardDescription className="text-gray-400">
                    Últimas 24 horas
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-[200px] w-full">
                    <div className="flex h-full w-full flex-col justify-end">
                      <div className="flex h-full items-end gap-2">
                        {Array.from({ length: 24 }).map((_, i) => {
                          const height = Math.floor(Math.random() * 100) + 20;
                          return (
                            <div
                              key={i}
                              className="group relative flex w-full cursor-pointer flex-col items-center"
                            >
                              <div
                                className="w-full rounded-t bg-purple-600"
                                style={{ height: `${height}%` }}
                              ></div>
                              <div className="absolute bottom-full mb-1 hidden rounded bg-zinc-800 p-1 text-xs group-hover:block">
                                ${Math.floor(Math.random() * 200) + 50}
                              </div>
                            </div>
                          );
                        })}
                      </div>
                      <div className="mt-2 flex justify-between text-xs text-gray-400">
                        <span>12 AM</span>
                        <span>6 AM</span>
                        <span>12 PM</span>
                        <span>6 PM</span>
                        <span>12 AM</span>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="border-white/10 bg-zinc-900">
                <CardHeader>
                  <CardTitle>Productos Más Vendidos</CardTitle>
                  <CardDescription className="text-gray-400">
                    Esta semana
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {[
                      {
                        name: "Hamburguesa Clásica",
                        value: 142,
                        percentage: 28,
                      },
                      { name: "Pizza Margarita", value: 97, percentage: 19 },
                      { name: "Ensalada César", value: 65, percentage: 13 },
                      { name: "Pasta Carbonara", value: 49, percentage: 10 },
                      { name: "Lomo Saltado", value: 38, percentage: 8 },
                    ].map((item, index) => (
                      <div key={index} className="space-y-2">
                        <div className="flex items-center justify-between">
                          <span className="text-sm">{item.name}</span>
                          <span className="text-sm font-medium">
                            {item.value}
                          </span>
                        </div>
                        <div className="h-2 w-full overflow-hidden rounded-full bg-zinc-800">
                          <div
                            className="h-full rounded-full bg-purple-600"
                            style={{ width: `${item.percentage}%` }}
                          ></div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Recent Activity */}
            <div className="mb-8">
              <Tabs defaultValue="ventas" className="w-full">
                <div className="flex items-center justify-between">
                  <TabsList className="bg-zinc-900">
                    <TabsTrigger
                      value="ventas"
                      className="data-[state=active]:bg-purple-900/30"
                    >
                      Ventas Recientes
                    </TabsTrigger>
                    <TabsTrigger
                      value="inventario"
                      className="data-[state=active]:bg-purple-900/30"
                    >
                      Inventario Bajo
                    </TabsTrigger>
                    <TabsTrigger
                      value="compras"
                      className="data-[state=active]:bg-purple-900/30"
                    >
                      Compras Pendientes
                    </TabsTrigger>
                  </TabsList>
                  <Button
                    variant="outline"
                    size="sm"
                    className="border-white/10 text-gray-400 hover:text-white"
                  >
                    Ver Todo
                  </Button>
                </div>

                <TabsContent value="ventas" className="mt-4">
                  <Card className="border-white/10 bg-zinc-900">
                    <CardContent className="p-0">
                      <div className="overflow-x-auto">
                        <table className="w-full">
                          <thead>
                            <tr className="border-b border-white/10">
                              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">
                                ID
                              </th>
                              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">
                                Cliente
                              </th>
                              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">
                                Productos
                              </th>
                              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">
                                Total
                              </th>
                              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">
                                Estado
                              </th>
                              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">
                                Hora
                              </th>
                            </tr>
                          </thead>
                          <tbody>
                            {[
                              {
                                id: "#4321",
                                customer: "Carlos Mendoza",
                                items: 3,
                                total: "$42.50",
                                status: "Completado",
                                time: "Hace 5 min",
                              },
                              {
                                id: "#4320",
                                customer: "María López",
                                items: 1,
                                total: "$18.90",
                                status: "Completado",
                                time: "Hace 12 min",
                              },
                              {
                                id: "#4319",
                                customer: "Roberto García",
                                items: 4,
                                total: "$53.25",
                                status: "Completado",
                                time: "Hace 25 min",
                              },
                              {
                                id: "#4318",
                                customer: "Ana Martínez",
                                items: 2,
                                total: "$34.80",
                                status: "Completado",
                                time: "Hace 42 min",
                              },
                              {
                                id: "#4317",
                                customer: "Pedro Sánchez",
                                items: 5,
                                total: "$67.15",
                                status: "Completado",
                                time: "Hace 1 hora",
                              },
                            ].map((order, index) => (
                              <tr
                                key={index}
                                className="border-b border-white/10 transition-colors hover:bg-zinc-800/50"
                              >
                                <td className="px-4 py-3 text-sm">
                                  {order.id}
                                </td>
                                <td className="px-4 py-3 text-sm">
                                  {order.customer}
                                </td>
                                <td className="px-4 py-3 text-sm">
                                  {order.items} items
                                </td>
                                <td className="px-4 py-3 text-sm font-medium">
                                  {order.total}
                                </td>
                                <td className="px-4 py-3 text-sm">
                                  <span className="inline-flex items-center rounded-full bg-green-900/20 px-2 py-1 text-xs font-medium text-green-400">
                                    {order.status}
                                  </span>
                                </td>
                                <td className="px-4 py-3 text-sm text-gray-400">
                                  {order.time}
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    </CardContent>
                  </Card>
                </TabsContent>

                <TabsContent value="inventario" className="mt-4">
                  <Card className="border-white/10 bg-zinc-900">
                    <CardContent className="p-0">
                      <div className="overflow-x-auto">
                        <table className="w-full">
                          <thead>
                            <tr className="border-b border-white/10">
                              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">
                                Producto
                              </th>
                              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">
                                Categoría
                              </th>
                              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">
                                Stock Actual
                              </th>
                              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">
                                Stock Mínimo
                              </th>
                              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">
                                Estado
                              </th>
                            </tr>
                          </thead>
                          <tbody>
                            {[
                              {
                                name: "Tomate",
                                category: "Verduras",
                                current: "2 kg",
                                min: "5 kg",
                                status: "Crítico",
                              },
                              {
                                name: "Queso Mozzarella",
                                category: "Lácteos",
                                current: "1.5 kg",
                                min: "3 kg",
                                status: "Crítico",
                              },
                              {
                                name: "Carne Molida",
                                category: "Carnes",
                                current: "3 kg",
                                min: "5 kg",
                                status: "Bajo",
                              },
                              {
                                name: "Lechuga",
                                category: "Verduras",
                                current: "1 kg",
                                min: "2 kg",
                                status: "Bajo",
                              },
                              {
                                name: "Aceite de Oliva",
                                category: "Aceites",
                                current: "2 L",
                                min: "3 L",
                                status: "Bajo",
                              },
                            ].map((item, index) => (
                              <tr
                                key={index}
                                className="border-b border-white/10 transition-colors hover:bg-zinc-800/50"
                              >
                                <td className="px-4 py-3 text-sm font-medium">
                                  {item.name}
                                </td>
                                <td className="px-4 py-3 text-sm">
                                  {item.category}
                                </td>
                                <td className="px-4 py-3 text-sm">
                                  {item.current}
                                </td>
                                <td className="px-4 py-3 text-sm">
                                  {item.min}
                                </td>
                                <td className="px-4 py-3 text-sm">
                                  <span
                                    className={`inline-flex items-center rounded-full px-2 py-1 text-xs font-medium ${
                                      item.status === "Crítico"
                                        ? "bg-red-900/20 text-red-400"
                                        : "bg-yellow-900/20 text-yellow-400"
                                    }`}
                                  >
                                    {item.status}
                                  </span>
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    </CardContent>
                  </Card>
                </TabsContent>

                <TabsContent value="compras" className="mt-4">
                  <Card className="border-white/10 bg-zinc-900">
                    <CardContent className="p-0">
                      <div className="overflow-x-auto">
                        <table className="w-full">
                          <thead>
                            <tr className="border-b border-white/10">
                              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">
                                Orden
                              </th>
                              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">
                                Proveedor
                              </th>
                              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">
                                Productos
                              </th>
                              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">
                                Total
                              </th>
                              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">
                                Fecha Entrega
                              </th>
                              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">
                                Estado
                              </th>
                            </tr>
                          </thead>
                          <tbody>
                            {[
                              {
                                id: "#1089",
                                supplier: "Distribuidora Alimentos S.A.",
                                items: 12,
                                total: "$345.80",
                                delivery: "Mañana",
                                status: "En Camino",
                              },
                              {
                                id: "#1088",
                                supplier: "Carnes Premium",
                                items: 5,
                                total: "$230.50",
                                delivery: "Mañana",
                                status: "Procesando",
                              },
                              {
                                id: "#1087",
                                supplier: "Verduras Frescas",
                                items: 8,
                                total: "$124.30",
                                delivery: "Hoy",
                                status: "En Camino",
                              },
                              {
                                id: "#1086",
                                supplier: "Lácteos del Valle",
                                items: 6,
                                total: "$187.20",
                                delivery: "Pasado Mañana",
                                status: "Procesando",
                              },
                              {
                                id: "#1085",
                                supplier: "Bebidas Internacionales",
                                items: 15,
                                total: "$412.75",
                                delivery: "Pasado Mañana",
                                status: "Pendiente",
                              },
                            ].map((order, index) => (
                              <tr
                                key={index}
                                className="border-b border-white/10 transition-colors hover:bg-zinc-800/50"
                              >
                                <td className="px-4 py-3 text-sm">
                                  {order.id}
                                </td>
                                <td className="px-4 py-3 text-sm">
                                  {order.supplier}
                                </td>
                                <td className="px-4 py-3 text-sm">
                                  {order.items} items
                                </td>
                                <td className="px-4 py-3 text-sm font-medium">
                                  {order.total}
                                </td>
                                <td className="px-4 py-3 text-sm">
                                  {order.delivery}
                                </td>
                                <td className="px-4 py-3 text-sm">
                                  <span
                                    className={`inline-flex items-center rounded-full px-2 py-1 text-xs font-medium ${
                                      order.status === "En Camino"
                                        ? "bg-blue-900/20 text-blue-400"
                                        : order.status === "Procesando"
                                        ? "bg-yellow-900/20 text-yellow-400"
                                        : "bg-gray-900/20 text-gray-400"
                                    }`}
                                  >
                                    {order.status}
                                  </span>
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    </CardContent>
                  </Card>
                </TabsContent>
              </Tabs>
            </div>

            {/* Quick Actions */}
            <div className="mb-8">
              <h3 className="mb-4 text-lg font-semibold">Acciones Rápidas</h3>
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                {[
                  {
                    icon: <ShoppingCart className="h-5 w-5" />,
                    label: "Nueva Venta",
                  },
                  {
                    icon: <Package className="h-5 w-5" />,
                    label: "Registrar Compra",
                  },
                  {
                    icon: <ClipboardList className="h-5 w-5" />,
                    label: "Crear Receta",
                  },
                  {
                    icon: <BarChart3 className="h-5 w-5" />,
                    label: "Ver Reportes",
                  },
                ].map((action, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    className="flex h-20 flex-col items-center justify-center gap-2 border-white/10 bg-zinc-900 hover:bg-purple-900/20 hover:text-white"
                  >
                    {action.icon}
                    <span>{action.label}</span>
                  </Button>
                ))}
              </div>
            </div>

            {/* Calendar & Upcoming */}
            <div className="grid gap-4 md:grid-cols-2">
              <Card className="border-white/10 bg-zinc-900">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>Calendario</CardTitle>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="text-gray-400 hover:text-white"
                    >
                      <Calendar className="mr-2 h-4 w-4" />
                      Junio 2024
                    </Button>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-7 gap-2 text-center">
                    {["L", "M", "X", "J", "V", "S", "D"].map((day) => (
                      <div
                        key={day}
                        className="text-xs font-medium text-gray-400"
                      >
                        {day}
                      </div>
                    ))}
                    {Array.from({ length: 30 }).map((_, i) => {
                      const isToday = i + 1 === 15;
                      const hasEvent = [3, 8, 12, 15, 22, 27].includes(i + 1);
                      return (
                        <div
                          key={i}
                          className={`flex h-8 w-8 items-center justify-center rounded-full text-xs ${
                            isToday
                              ? "bg-purple-600 text-white"
                              : hasEvent
                              ? "bg-purple-900/30 text-purple-300"
                              : "text-gray-400 hover:bg-zinc-800"
                          } cursor-pointer`}
                        >
                          {i + 1}
                        </div>
                      );
                    })}
                  </div>
                </CardContent>
              </Card>

              <Card className="border-white/10 bg-zinc-900">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>Próximos Eventos</CardTitle>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="text-gray-400 hover:text-white"
                    >
                      <Clock className="mr-2 h-4 w-4" />
                      Hoy
                    </Button>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {[
                      {
                        time: "10:00 AM",
                        title: "Entrega de Proveedor",
                        description: "Distribuidora Alimentos S.A.",
                      },
                      {
                        time: "12:30 PM",
                        title: "Hora Pico Almuerzo",
                        description: "Preparar 3 cocineros",
                      },
                      {
                        time: "3:00 PM",
                        title: "Reunión de Personal",
                        description: "Revisión de nuevos platos",
                      },
                      {
                        time: "7:00 PM",
                        title: "Reserva Especial",
                        description: "Mesa para 8 personas - Cumpleaños",
                      },
                    ].map((event, index) => (
                      <div key={index} className="flex items-start gap-4">
                        <div className="flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-full bg-purple-900/30 text-xs font-medium text-purple-300">
                          {event.time.split(" ")[0]}
                        </div>
                        <div className="flex-1">
                          <h4 className="text-sm font-medium">{event.title}</h4>
                          <p className="text-xs text-gray-400">
                            {event.description}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </main>
      </div>
    </div>
  );
}
